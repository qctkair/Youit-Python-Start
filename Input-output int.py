# Данные в компьютере - бинарная последовательность 0 и 1.
#
#                       Языки программирования 
#                      /                      \
# типизированные (typed)                       нетипизированные (untyped)
#   Python, C++, Go...                              Assembler, FORTH


# int (integer) - целые числа
# название переменной (variable) = значение переменной (value)
number1 = int()  # number1 = 0
number2 = -7
number3 = 13
numner4 = number3


# print(object1, object2, ...) - печать объектов, по умолчанию разделитель (separator) - пробел
print(-983, 0, 1197)

# type(object) - функция, которая возвращает тип переменной
print("number1 =", number1, f"({type(number1)}),", "number2 =", number2, f"({type(number2)}),", "number3 =", number3, f"({type(number3)}),", number4, f"({type(number4)})")


# далее '<=' - меньше или равно, '>=' - больше или равно, '!=' - неравно


# арифметические операции:
# '+' - сложение,
# '-' - вычитание,
# '*' - умножение,
# '/' - деление
# '**' - возведение в степень,
# '%' - остаток,
# '//' - целочисленное деление
#
#
# a % b, a // b:
#
# при a >= 0, b > 0: a = b * c + d (a делим на b получаем c, d - остаток), a % b = d, a // b = c
# например: 17 : 3 = 5, 2 - остаток, 17 % 3 = 2, 17 // 5 = 3
#
# при a < 0, b > 0: a = b * c + d, b != 0, 0 <= d <= |b|    https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81_%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%BA%D0%BE%D0%BC
# например: -11 : 3 = -4 (-11 = 3 * -4 + 1), 1 - остаток, -11 % 3 = 1, -11 // 3 = -4
# в Python как в математике, но например в C++ нет... :(
#
# b < 0 не рассматриваем.
print(-11 % 3, -11 // 3)

# можем создавать переменные так... и...
number5 = 15 * 6
number6 = 32 % 11

# ... выводить
print("number5 =", number5)
print("number6 =", number6)
print("89 // 26 =", 89 // 26)  # '89 // 26' - временное значение, создали (посчитали), вывели, забыли


# input(string) - получаем строчку от пользователя: 1. запрашиваем ввод (если надо пояснить, что хотим ввести указываем это как string - программа выведет string как обычный print() перед вводом), программа ждет ввода (блокирующая операция), получили - идем дальше
# то есть получать можем только строчки, а что если нужно целое число?
# - преобразуем строчку в целое число с помощью int()
number7 = int(input("введите значение для number7:"))
print("number7 =", number7)
print("number7 % 2 =", number7 % 2)


# '#' - начало комментария (пояснение, заметка...)
# comment
# continue my comment, 1 / 0 - i can)
print("comment is here")  # comment too